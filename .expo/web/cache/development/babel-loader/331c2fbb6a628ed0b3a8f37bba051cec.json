{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\nimport { Provider } from 'react-redux';\nimport App from \"./App\";\nimport store from \"./src/redux/store/store\";\nimport React, { useEffect } from 'react';\nimport * as Updates from 'expo-updates';\n\nvar Main = function Main() {\n  useEffect(function () {\n    checkUpdates();\n  }, []);\n\n  var checkUpdates = function checkUpdates() {\n    var update;\n    return _regeneratorRuntime.async(function checkUpdates$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Updates.checkForUpdateAsync());\n\n          case 3:\n            update = _context.sent;\n\n            if (!update.isAvailable) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(Updates.fetchUpdateAsync());\n\n          case 7:\n            alert('New Update Available');\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(Updates.reloadAsync());\n\n          case 10:\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n\n  return React.createElement(Provider, {\n    store: store\n  }, React.createElement(App, null));\n};\n\nregisterRootComponent(Main);","map":{"version":3,"sources":["/Users/omkumar/Desktop/projects/farmers-gate/farmers-gate/index.js"],"names":["registerRootComponent","Provider","App","store","React","useEffect","Updates","Main","checkUpdates","checkForUpdateAsync","update","isAvailable","fetchUpdateAsync","alert","reloadAsync","console","log"],"mappings":";AAAA,OAAO,8BAAP;AACA,SAASA,qBAAT,QAAsC,MAAtC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,GAAP;AACA,OAAOC,KAAP;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAEfF,EAAAA,SAAS,CAAC,YAAM;AACZG,IAAAA,YAAY;AACf,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAMA,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEQF,OAAO,CAACG,mBAAR,EAFR;;AAAA;AAEPC,YAAAA,MAFO;;AAAA,iBAGTA,MAAM,CAACC,WAHE;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAIHL,OAAO,CAACM,gBAAR,EAJG;;AAAA;AAKTC,YAAAA,KAAK,CAAC,sBAAD,CAAL;AALS;AAAA,6CAMHP,OAAO,CAACQ,WAAR,EANG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASbC,YAAAA,OAAO,CAACC,GAAR;;AATa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAaA,SACI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEb;AAAjB,KACI,oBAAC,GAAD,OADJ,CADJ;AAKH,CAxBD;;AAyBAH,qBAAqB,CAACO,IAAD,CAArB","sourcesContent":["import 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './src/redux/store/store';\nimport React, { useEffect } from 'react';\nimport * as Updates from 'expo-updates';\n\nconst Main = () => {\n\n    useEffect(() => {\n        checkUpdates()\n    }, [])\n\n    const checkUpdates = async () => {\n        try {\n            const update = await Updates.checkForUpdateAsync();\n            if (update.isAvailable) {\n                await Updates.fetchUpdateAsync();\n                alert('New Update Available')\n                await Updates.reloadAsync();\n            }\n        } catch (e) {\n            console.log(e)\n        }\n\n    }\n    return (\n        <Provider store={store}>\n            <App />\n        </Provider>\n    )\n}\nregisterRootComponent(Main);\n"]},"metadata":{},"sourceType":"module"}